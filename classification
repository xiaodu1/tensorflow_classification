import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
#number 1 to 10 data
mnist = input_data.read_data_sets('MNIST_data',one_hot=True)

def add_layer(inputs,in_size,out_size,activation_function=None):
    #add one more layer and return the output of this layer
    Weights = tf.Variable(tf.random_normal([in_size,out_size]))
    biases = tf.Variable(tf.zeros([1,out_size]) + 0.1)
    Wx_plus_b = tf.matmul(inputs,Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs


def compute_accuracy(v_xs,v_ys):       #计算准确度
    global prediction #定义全局变量
    y_pre = sess.run(prediction,feed_dict={xs:v_xs})#预测值y_pre是一行十列的值，分别代
                                                    #表可能为0-9十个数字的概率
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))#tf.argmax(input,axis)
                                                            #根据axis取值的不同返回每
                                                            #行或者每列最大值的索引。
                                                            # 1为输出每一行最大的元素
                                                            #所在的索引
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
                                                            #tf.cast转换数据类型
                                                            #将bool型变量转换成float型，就能将其转换为0和1的序列
                                                            #计算多少个是对的多少个是错的
    result =sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys})
    return result

#define placeholder for inputs to network
xs = tf.placeholder(tf.float32,[None,784]) #28*28 不显示样本的个数，但是每个样本都是784维
ys = tf.placeholder(tf.float32,[None,10])

#add output layer
prediction = add_layer(xs,784,10,activation_function=tf.nn.softmax)

#the error between prediction and real data
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1]))

train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

with tf.Session() as sess:

    sess.run(tf.global_variables_initializer())

    for i in range(1000):
        batch_xs,batch_ys = mnist.train.next_batch(100)
        sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys})
        if i % 50 == 0:
            print(compute_accuracy(mnist.test.images,mnist.test.labels))
